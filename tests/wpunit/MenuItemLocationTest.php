<?php

class MenuItemLocationTest extends \Codeception\TestCase\WPTestCase {

	public $group_key;
	public $post_id;
	public $test_image;
	public $tag_id;
	public $comment_id;
	public $menu_item_id;

	public function setUp(): void {

		parent::setUp(); // TODO: Change the autogenerated stub
		$this->group_key = __CLASS__;
		WPGraphQL::clear_schema();
		$this->register_acf_field_group();

		$this->post_id = $this->factory()->post->create( [
			'post_type'    => 'post',
			'post_status'  => 'publish',
			'post_title'   => 'Test',
			'post_content' => 'test',
		] );

		$this->tag_id = $this->factory()->term->create( [
			'taxonomy' => 'post_tag',
		] );

		$this->comment_id = $this->factory()->comment->create([
			'comment_content' => 'test comment',
			'comment_author' => 'Test Author',
			'comment_approved' => true,
			'comment_post_ID' => $this->post_id,
		]);

		$location_name = 'test-location';
		add_theme_support( 'nav_menus' );
		register_nav_menu( $location_name, 'test menu...' );
		$menu_slug = 'my-test-menu';
		$menu_id = wp_create_nav_menu( $menu_slug );
		$post_id = $this->factory()->post->create();

		$this->menu_item_id = wp_update_nav_menu_item(
			$menu_id,
			0,
			[
				'menu-item-title'     => 'Menu item',
				'menu-item-object'    => 'post',
				'menu-item-object-id' => $post_id,
				'menu-item-status'    => 'publish',
				'menu-item-type'      => 'post_type',
			]
		);
		set_theme_mod( 'nav_menu_locations', [ $location_name => $menu_id ] );

		$this->test_image = dirname( __FILE__, 2 ) . '/_data/images/test.png';

	}

	public function tearDown(): void {
		acf_remove_local_field_group( $this->group_key );
		wp_delete_post( $this->post_id, true );
		WPGraphQL::clear_schema();
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function register_acf_field_group( $config = [] ) {

		$defaults = [
			'key'                   => $this->group_key,
			'title'                 => 'Menu Item Fields',
			'fields'                => [],
			'location'              => [
				[
					[
						'param'    => 'nav_menu_item',
						'operator' => '==',
						'value'    => 'all',
					],
				],
			],
			'menu_order'            => 0,
			'position'              => 'normal',
			'style'                 => 'default',
			'label_placement'       => 'top',
			'instruction_placement' => 'label',
			'hide_on_screen'        => '',
			'active'                => true,
			'description'           => '',
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'menuItemFields',
			'graphql_types'         => [ 'MenuItem' ]
		];

		acf_add_local_field_group( array_merge( $defaults, $config ) );


	}

	public function register_acf_field( $config = [] ) {

		$defaults = [
			'parent'            => $this->group_key,
			'key'               => 'field_5d7812fd123',
			'label'             => 'Text',
			'name'              => 'text',
			'type'              => 'text',
			'instructions'      => '',
			'required'          => 0,
			'conditional_logic' => 0,
			'wrapper'           => array(
				'width' => '',
				'class' => '',
				'id'    => '',
			),
			'show_in_graphql'   => 1,
			'default_value'     => '',
			'placeholder'       => '',
			'prepend'           => '',
			'append'            => '',
			'maxlength'         => '',
		];

		acf_add_local_field( array_merge( $defaults, $config ) );
	}

	/**
	 * @throws Exception
	 */
	public function testBasicQuery() {
		$query  = '{ menus { nodes { id } } }';
		$actual = graphql( [ 'query' => $query ] );
		$this->assertArrayNotHasKey( 'errors', $actual );
	}

	public function testAcfTextField() {

		$this->register_acf_field([
			'name' => 'menu_item_text_test',
			'type' => 'text',
		]);

		$expected_text = 'Some Text';

		update_field( 'menu_item_text_test', $expected_text, $this->menu_item_id );
		$field = get_field( 'menu_item_text_test', $this->menu_item_id );
		codecept_debug( [ 'field_value', $field, $this->comment_id ] );

		$query = '
		query getMenuItem( $id: ID! ) {
			menuItem( id: $id ) {
				__typename
				databaseId
				menuItemFields {
					fieldGroupName
					menuItemTextTest
				}
			}
		}
		';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'id' => \GraphQLRelay\Relay::toGlobalId( 'post', $this->menu_item_id ),
			],
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( $this->menu_item_id, $actual['data']['menuItem']['databaseId'] );
		$this->assertSame( $expected_text, $actual['data']['menuItem']['menuItemFields']['menuItemTextTest'] );

	}

}
